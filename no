Counting characters, lines and words in a file 
Get-Content C:<txt file> | measure -Line -Character -Word (optional -Ignorewhitespace)

Measuring length of a string - $string.length
Addition
+ - addittion
- - subtraction
* - muliplication
/ - division
% - modules




$guy = @{name = " ";}
$guy["new"] = " "



Return line of text in file that begins with specified text, if none, return null

      $content = get-contnt $file 
      foreach ($i in $content) {
            if ($i.startswith($line)) {
                  return $i
                  }
      return $null



Combine argument into string, seperated by "/" between each element 
      
      return $arr-join('/')




Return Processes sorted descending by processname 

      return Get-Process | Sort-Object -Property name -descending



Search for an array for first occurance for $key at column index 0 an dreturn value at column index 9 in same row., return -1 if not found

      foreach ($i in $arr) {
            if($i[0] -eq $key) {
                  return $i[9]
                  }
            }
      return -1


Get todays date in yyyymmdd format

      %fmt = '%y%m%d'
      return Get-Date -Uformat $fmt


Provided on the pipeline

      $_ or $input


Function Get-SquareNum($Num){
      $result = $num * $num
      $result
      }



Function Get-Product($val1,$val2,$val3) {
      return $val1 * $val2 * $val3
      $result
      }



Function Get-Missingside($a,$b) {
      return [math]::sqrt(($a * $a) + ($b * $b)) 
      }



Functon Get-Anglesum($a,$b) {
      return 180 - ($a + $b)
}




Function Get-Userinfo {
param(
[Parameter(mandatory,Position=1)]
[string]
$first,
[Parameter(mandatory,position=3)]
[string]
$last,
[Parameter(mandatory,position=2)]
[int]



Functon Get-Multisum([array]$aaray,[int]$number) {
      Begin{
            $sum=0
            }
      Process {
            Foreach($num in $array) {
                  if($num -eq $number) {
                        continue
                              }
      $sum += $num
                              }
                              }
      End {
      $sum
      }





Function Get-LongestName {
Begin{
      $count = 0
      $states = @(0
      }
Process {
      while($count -lt 3) {
            $res = Read-Host "enter a us state"
            $states += $res
            $count += 1
                        }
            }
End {
      $list = $states | sort _property Length -Descending
      Foreach($state in $list) {
            "$state': " + $state.length
}












PS> $ht= 1,1,1,2,2,3,4,4,4,4,5,5 | Group-Object -AsHashTable -AsString
PS> $ht

Name                           Value
----                           -----
2                              {2, 2}
4                              {4, 4, 4, 4}
5                              {5, 5}
1                              {1, 1, 1}
3                              {3}


PS> $ht['1']
1
1
1
PS> 1, 1, 1, 2, 2, 3, 4, 4, 4, 4, 5, 5 | Group-Object -NoElement |
      Select-Object @{ n='Element:Count'; e={ '{0}:{1}' -f $_.Values[0], $_.Count } }

Element:Count
-------------
1:3
2:2
3:1
4:4
5:2
